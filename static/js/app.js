// LeetCode Progress Tracker - ApexCharts Integration

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
const loadingConfig = {
    showLoading: false,         // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ (false = –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)
    useSkeletonLoading: true,   // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å skeleton loading –≤–º–µ—Å—Ç–æ —Å–ø–∏–Ω–Ω–µ—Ä–∞
    preloadCharts: true,        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
    fastSwitch: true            // –ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ç–∞–±–∞–º–∏
};

// –ö–∞—Ä—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è endpoints –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
const chartEndpoints = {
    'progress': '/api/plot/progress',
    'total': '/api/plot/total',
    'daily': '/api/plot/daily-progress',
    'difficulty-breakdown': '/api/plot/difficulty-breakdown',
    'difficulty-total': '/api/plot/difficulty-total',
    'difficulty-progress': '/api/plot/difficulty-progress',
    'heatmap': '/api/plot/weekly-heatmap'
};

const chartContainers = {
    'progress': 'progressChart',
    'total': 'totalChart',
    'daily': 'dailyChart',
    'difficulty-breakdown': 'difficultyBreakdownChart',
    'difficulty-total': 'difficultyTotalChart',
    'difficulty-progress': 'difficultyProgressChart',
    'heatmap': 'heatmapChart'
};

// –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º
let chartsCache = {};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initializeCharts();
    initializeTabs();
    initializeTooltips();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏
    const activeTab = document.querySelector('.tab-btn.active');
    let initialChartType = 'progress'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    if (activeTab) {
        const chartType = activeTab.dataset.chart;
        console.log('Found active tab with chart type:', chartType);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–∞–∫–æ–π —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (chartEndpoints[chartType]) {
            initialChartType = chartType;
        } else {
            console.error('Chart type not found in endpoints:', chartType);
        }
    } else {
        console.log('No active tab found, using default progress chart');
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    showChart(initialChartType);
    loadChart(initialChartType);
    
    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –≤ —Ñ–æ–Ω–µ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    if (loadingConfig.preloadCharts) {
        setTimeout(() => {
            const preloadCharts = ['total', 'daily'];
            preloadCharts.forEach(type => {
                if (type !== initialChartType && chartEndpoints[type]) {
                    loadChart(type);
                }
            });
        }, 500);
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–æ–≤
function initializeTabs() {
    const tabButtons = document.querySelectorAll('.tab-btn');
    
    tabButtons.forEach(button => {
        button.addEventListener('click', function() {
            const chartType = this.dataset.chart;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–±—ã
            tabButtons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞
            showChart(chartType);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –µ—Å–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è UI)
            if (!chartsCache[chartType]) {
                loadChart(chartType);
            }
        });
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞
function showChart(chartType) {
    const chartContainersElements = document.querySelectorAll('.chart');
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    chartContainersElements.forEach(container => {
        container.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ —Å–æ—Å—Ç–∞–≤–Ω–æ–º—É ID (chartType + '-chart')
    const targetContainer = document.getElementById(chartType + '-chart');
    if (targetContainer) {
        targetContainer.classList.add('active');
        console.log(`Showing chart container: ${chartType}-chart`);
    } else {
        console.error(`Container ${chartType}-chart not found`);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
async function loadChart(chartType) {
    const endpoint = chartEndpoints[chartType];
    const containerId = chartContainers[chartType];
    
    if (!endpoint || !containerId) {
        console.error(`Chart type ${chartType} not found`);
        return;
    }
    
    // –ï—Å–ª–∏ –≥—Ä–∞—Ñ–∏–∫ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
    if (chartsCache[chartType]) {
        return chartsCache[chartType];
    }
    
    const container = document.getElementById(containerId);
    if (!container) {
        console.error(`Container ${containerId} not found`);
        return;
    }
    
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if (loadingConfig.showLoading) {
            if (loadingConfig.useSkeletonLoading) {
                container.innerHTML = `
                    <div class="chart-skeleton">
                        <div class="skeleton-header"></div>
                        <div class="skeleton-chart"></div>
                    </div>
                `;
            } else {
                container.innerHTML = '<div class="chart-loading"></div>';
            }
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Promise.race –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        const response = await fetch(endpoint);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const chartConfig = await response.json();
        
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        container.innerHTML = '';
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫
        const chart = new ApexCharts(container, chartConfig);
        await chart.render();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        chartsCache[chartType] = chart;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        if (chartType === 'difficulty-total' || chartType === 'difficulty-progress') {
            initializeDifficultyControls(chartType);
        }
        
        console.log(`Chart ${chartType} loaded successfully`);
    } catch (error) {
        console.error(`Error loading chart ${chartType}:`, error);
        container.innerHTML = `
            <div class="chart-error">
                ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞: ${error.message}
                <br>
                <button onclick="loadChart('${chartType}')" class="retry-btn">üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
            </div>
        `;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞)
function initializeCharts() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
    console.log('Charts initialized');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—É–ª—Ç–∏–ø–æ–≤
function initializeTooltips() {
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç—É–ª—Ç–∏–ø–æ–≤ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    const tooltipElements = document.querySelectorAll('[data-tooltip="true"]');
    tooltipElements.forEach(element => {
        const tooltipContent = element.querySelector('.tooltip-content');
        if (tooltipContent) {
            element.addEventListener('mouseenter', () => {
                tooltipContent.style.display = 'block';
            });
            element.addEventListener('mouseleave', () => {
                tooltipContent.style.display = 'none';
            });
        }
    });
    console.log('Tooltips initialized');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
async function updateData() {
    const updateBtn = document.getElementById('updateBtn');
    const loading = document.getElementById('loading');
    const message = document.getElementById('message');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    updateBtn.disabled = true;
    loading.style.display = 'block';
    message.innerHTML = '';
    
    try {
        const response = await fetch('/api/update', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            }
        });
        
        const result = await response.json();
        
        if (result.success) {
            message.innerHTML = '<p class="success">‚úÖ ' + result.message + '</p>';
            
            // –û—á–∏—â–∞–µ–º –∫—ç—à –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫
            Object.keys(chartsCache).forEach(chartType => {
                if (chartsCache[chartType]) {
                    chartsCache[chartType].destroy();
                    delete chartsCache[chartType];
                }
            });
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            setTimeout(() => {
                window.location.reload();
            }, 2000);
        } else {
            message.innerHTML = '<p class="error">‚ùå ' + result.message + '</p>';
            if (result.error) {
                console.error('Update error:', result.error);
            }
        }
    } catch (error) {
        console.error('Update request failed:', error);
        message.innerHTML = '<p class="error">‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message + '</p>';
    } finally {
        updateBtn.disabled = false;
        loading.style.display = 'none';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
function toggleDifficultyLevel(chartType, difficulty) {
    const chart = chartsCache[chartType];
    if (!chart) {
        console.error(`Chart ${chartType} not found in cache`);
        return;
    }
    
    const button = document.querySelector(`#${chartType}-chart .difficulty-btn[data-difficulty="${difficulty}"]`);
    if (!button) {
        console.error(`Button for difficulty ${difficulty} not found`);
        return;
    }
    
    const isActive = button.classList.contains('active');
    const difficultyLevel = difficulty.charAt(0).toUpperCase() + difficulty.slice(1);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const seriesToToggle = chart.w.globals.seriesNames.filter(name => 
        name.includes(`(${difficultyLevel})`)
    );
    
    if (isActive) {
        // –°–∫—Ä—ã–≤–∞–µ–º –ª–∏–Ω–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        seriesToToggle.forEach(seriesName => {
            chart.hideSeries(seriesName);
        });
        button.classList.remove('active');
    } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏–Ω–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        seriesToToggle.forEach(seriesName => {
            chart.showSeries(seriesName);
        });
        button.classList.add('active');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
function initializeDifficultyControls(chartType) {
    const chartContainer = document.getElementById(`${chartType}-chart`);
    if (!chartContainer) return;
    
    const controlsContainer = chartContainer.querySelector('.difficulty-controls');
    if (!controlsContainer) return;
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã
    const buttons = controlsContainer.querySelectorAll('.difficulty-btn');
    buttons.forEach(button => {
        if (!button.classList.contains('active')) {
            button.classList.add('active');
        }
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≥–ª–æ–±–∞–ª—å–Ω–æ
window.addEventListener('error', function(e) {
    console.error('Global error:', e.error);
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
function debugChartData(chartType) {
    const endpoint = chartEndpoints[chartType];
    fetch(endpoint)
        .then(response => response.json())
        .then(data => {
            console.log(`Chart data for ${chartType}:`, data);
        })
        .catch(error => {
            console.error(`Error fetching ${chartType} data:`, error);
        });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
function configureLoading(options = {}) {
    Object.assign(loadingConfig, options);
    console.log('Loading configuration updated:', loadingConfig);
}

// –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∏
function disableLoading() {
    configureLoading({ showLoading: false });
}

function enableFastLoading() {
    configureLoading({ 
        showLoading: true,
        useSkeletonLoading: false,
        preloadCharts: true,
        fastSwitch: true 
    });
}

function enableSkeletonLoading() {
    configureLoading({ 
        showLoading: true,
        useSkeletonLoading: true,
        preloadCharts: true 
    });
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.updateData = updateData;
window.loadChart = loadChart;
window.debugChartData = debugChartData;
window.toggleDifficultyLevel = toggleDifficultyLevel;
window.configureLoading = configureLoading;
window.disableLoading = disableLoading;
window.enableFastLoading = enableFastLoading;
window.enableSkeletonLoading = enableSkeletonLoading;
